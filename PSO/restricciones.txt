def apply_DEB_constraints(self, particle):
        # Restricciones basadas en las reglas DEB
        SVR = self.calculate_SVR(particle)
        if SVR == 0:
            return  # No hay violación de restricciones, la solución es válida
        
        # Aplicar las reglas DEB para seleccionar las soluciones válidas
        for i in range(len(self.bounds)):
            if self.bounds[i, 0] <= particle.position[i] <= self.bounds[i, 1]:
                # La posición está dentro de los límites, aplicar regla b)
                return
        # Si ninguna posición es válida, aplicar regla c)
        if SVR < particle.best_value:  # Comparar con la mejor posición local
            particle.best_value = SVR
            particle.best_position = np.copy(particle.position)
        if SVR < self.global_best_value:  # Comparar con la mejor posición global
            self.global_best_value = SVR
            self.global_best_position = np.copy(particle.position)

    def calculate_SVR(self, particle):
        # Calcular la suma de violación de restricciones (SVR)
        SVR = 0
       
        # Restricciones del tipo: Cx <= d
        SVR += max(0, C7 * particle.position[5]^2 + C8 * particle.position[-1] * particle.position[2] - C9 * particle.position[5] - 1)
        SVR += max(0, C10 * particle.position[0] * particle.position[2]^(-1) + C11 * particle.position[2]^(-1) * particle.position[5] - C12 * particle.position[0] * particle.position[2]^(-1) * particle.position[5]^2 - 1)
        SVR += max(0, C13 * particle.position[5]^2 + C14 * particle.position[4] - C15 * particle.position[3] - C16 * particle.position[5] - 1)
        SVR += max(0, C17 * particle.position[4]^(-1) + C18 * particle.position[4]^(-1) * particle.position[5] + C19 * particle.position[3] * particle.position[4]^(-1) - C20 * particle.position[4]^(-1) * particle.position[5]^2 - 1)
        SVR += max(0, C21 * particle.position[6] + C22 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) - C23 * particle.position[1] * particle.position[2]^(-1) - 1)
        SVR += max(0, C24 * particle.position[6]^(-1) + C25 * particle.position[1] * particle.position[2]^(-1) * particle.position[6]^(-1) - C26 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) * particle.position[6]^(-1) - 1)
        SVR += max(0, C27 * particle.position[4]^(-1) + C28 * particle.position[4]^(-1) * particle.position[6] - C29 * particle.position[6] - 1)
        SVR += max(0, C30 * particle.position[4] - C31 * particle.position[6] - 1)
        SVR += max(0, C32 * particle.position[2] - C33 * particle.position[1] - 1)
        SVR += max(0, C34 * particle.position[0] * particle.position[2]^(-1) + C35 * particle.position[2]^(-1) - 1)
        SVR += max(0, C36 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) - C37 * particle.position[1] * particle.position[2]^(-1) - 1)
        SVR += max(0, C38 * particle.position[3] + C39 * particle.position[1] - C40 * particle.position[2] - 1)
        SVR += max(0, C41 * particle.position[0] * particle.position[5] + C42 * particle.position[0] - C43 * particle.position[2] - 1)
        return SVR



        constraints = [
            C7 * particle.position[5]^2 + C8 * particle.position[0]^(-1) * particle.position[2] - C9 * particle.position[5] - 1 >= 0,
            C10 * particle.position[0] * particle.position[2]^(-1) + C11 * particle.position[0] * particle.position[2]^(-1) * particle.position[5] - C12 * particle.position[0] * particle.position[2]^(-1) * particle.position[5]^2 - 1 >= 0,
            C13 * particle.position[5]^2 + C14 * particle.position[4] - C15 * particle.position[3] - C16 * particle.position[5] - 1 >= 0,
            C17 * particle.position[4]^(-1) + C18 * particle.position[4]^(-1) * particle.position[5] + C19 * particle.position[3] * particle.position[4]^(-1) - C20 * particle.position[4]^(-1) * particle.position[5]^2 - 1 >= 0,
            C21 * particle.position[6] + C22 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) - C23 * particle.position[1] * particle.position[2]^(-1) - 1 >= 0,
            C24 * particle.position[6]^(-1) + C25 * particle.position[1] * particle.position[2]^(-1) * particle.position[6]^(-1) - C26 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) * particle.position[6]^(-1) - 1 >= 0,
            C27 * particle.position[4]^(-1) + C28 * particle.position[4]^(-1) * particle.position[6] - 1 >= 0,
            C29 * particle.position[4] - C30 * particle.position[6] - 1 >= 0,
            C31 * particle.position[2] - C32 * particle.position[0] - 1 >= 0,
            C33 * particle.position[0] * particle.position[2]^(-1) + C34 * particle.position[2]^(-1) - 1 >= 0,
            C35 * particle.position[1] * particle.position[2]^(-1) * particle.position[3]^(-1) - C36 * particle.position[1] * particle.position[2]^(-1) - 1 >= 0,
            C37 * particle.position[3] + C38 * particle.position[1]^(-1) - 1 >= 0,
            C39 * particle.position[0] * particle.position[5] + C40 * particle.position[0] - C41 * particle.position[2] - 1 >= 0,
            C42 * particle.position[0]^(-1) * particle.position[2] + C43 * particle.position[0]^(-1) - C44 * particle.position[5] - 1 >= 0
        ]



        RESTRICCIONES 

c7*x6^2 + c8*x1^-1*x3 - c9*x6<= 1
c10*x1*x3^-1 + c11*x1*x3^-1*x6 - c12*x1*x3^-1*x6^2 <= 1
c13*x6^2 + c14*x5 - c15*x4 - c16*x6 <= 1
c17*x5^-1 + c18*x5^-1*x6 + c19*x4*x5^-1 - c20*x5^-2*x6^2 <= 1
c21^x7 + c22*x2*x3^-1*x4^-1 - c23*x2*x3^-1 <= 1
c24*x7^-1 + c25*x2*x3^-1*x7^-1 - c26*x2*x3^-1*x4^-1*x7^-1<= 1
c27*x5^-1 + c28*x5^-1*x7 <= 1
c29*x5 - c30*x7 <= 1
c31*x3 - c32*x1 <= 1
c33*x1*x3^-1 + c34*x3^-1 <= 1
c35*x2*x3^-1*x4^-1 - c36*x2*x3^-1 <= 1
c37*x4 + c38*x2^-1*x3*x4 <= 1
c39*x1*x6 + c40*x1 - c41*x3 <= 1
c42*x1^-1*x3 + c43*x1^-1 - c44*x6 <= 1
